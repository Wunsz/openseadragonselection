{"version":3,"sources":["selection.js","selectionoverlay.js","selectionrect.js"],"names":["OpenSeadragon","require","$","version","major","Error","onOutsideDrag","e","this","viewer","setMouseNavEnabled","oldRect","delta","viewport","deltaPointsFromPixels","end","pointFromPixel","position","start","Point","x","y","rect","restrictToImage","clone","rectDone","allowRotation","angle1","getAngleFromCenter","angle2","rotation","Math","PI","startRotated","getPrerotatedRect","rotatedStartPoint","startRotatedHeight","width","height","bounds","world","getHomeBounds","fitsIn","Rect","self","point","pointIsInImage","prop","restrictVector","SelectionRect","draw","onOutsideDragEnd","abs","onClick","canvas","focus","onInsideDrag","addClass","element","onInsideDragEnd","removeClass","onBorderDrag","border","center","getDegreeRotation","rotate","getCenter","newCenter","minus","onBorderDragEnd","onKeyPress","key","keyCode","charCode","confirm","String","fromCharCode","keyboardShortcut","toggleState","dist","distanceTo","angle","atan2","heightModDelta","Viewer","prototype","selection","options","selectionInstance","Selection","handle","extend","isSelecting","buttonActiveImg","toggleButton","showSelectionControl","showConfirmDenyButtons","styleConfirmDenyButtons","returnPixelCoordinates","onSelectionConfirmed","onSelectionCanceled","onSelectionChange","onSelectionToggled","prefixUrl","navImages","REST","GROUP","HOVER","DOWN","selectionConfirm","selectionCancel","borderStyle","color","handleStyle","top","left","margin","background","cornersStyle","makeNeutralElement","style","className","borders","corners","i","MouseTracker","dragHandler","bind","dragEndHandler","appendChild","setTimeout","right","bottom","overlay","SelectionOverlay","innerTracker","clickTimeThreshold","clickDistThreshold","delegate","clickHandler","outerTracker","startDisabled","addEvent","container","prefix","useGroup","buttons","anyButton","onFocusHandler","onFocus","onBlurHandler","onBlur","Button","getElement","tooltip","getString","srcRest","srcGroup","srcHover","srcDown","onRelease","push","imgDown","cloneNode","confirmButton","classList","add","cancelButton","cancel","transform","addHandler","ControlDock","setState","enabled","setTracking","undraw","visibility","raiseEvent","setAllowRotation","enable","disable","update","normalize","drawHTML","drawer","destroy","result","real","viewportToImageRectangle","fromRect","round","location","Overlay","apply","arguments","isPlainObject","Object","create","replace","equals","other","toString","swapWidthHeight","swapped","diff","fixed","area","getTopLeft","getTopRight","getBottomRight","getBottomLeft","areaEnd","reduceRotation","reduced"],"mappings":"AAAA,IAAAA,cAAAC,QAAA,kBAEA,SAAAC,gBAGA,IAAAA,EAAAC,SAAAD,EAAAC,QAAAC,MAAA,EACA,MAAA,IAAAC,MAAA,gFAiWA,SAAAC,EAAAC,GAEAC,KAAAC,OAAAC,oBAAA,GACA,IAkBAC,EAlBAC,EAAAJ,KAAAC,OAAAI,SAAAC,sBAAAP,EAAAK,OAAA,GACAG,EAAAP,KAAAC,OAAAI,SAAAG,eAAAT,EAAAU,UAAA,GACAC,EAAA,IAAAhB,EAAAiB,MAAAJ,EAAAK,EAAAR,EAAAQ,EAAAL,EAAAM,EAAAT,EAAAS,GACA,GAAAb,KAAAc,KAcA,CAEAd,KAAAe,kBACAZ,EAAAH,KAAAc,KAAAE,SAEAhB,KAAAiB,SAEAjB,KAAAkB,gBACAC,EAAAnB,KAAAc,KAAAM,mBAAAV,GACAW,EAAArB,KAAAc,KAAAM,mBAAAb,GACAP,KAAAc,KAAAQ,UAAAtB,KAAAc,KAAAQ,SAAAH,EAAAE,GAAAE,KAAAC,IAGAxB,KAAAyB,aACAzB,KAAAc,KAAAY,EAAA1B,KAAA2B,kBAAApB,EAAAP,KAAA4B,qBAEA5B,KAAAc,KAAAe,OAAAzB,EAAAQ,EACAZ,KAAAc,KAAAgB,QAAA1B,EAAAS,GAGA,IAAAkB,EAAA/B,KAAAC,OAAA+B,MAAAC,gBACAjC,KAAAe,kBAAAf,KAAAc,KAAAoB,OAAA,IAAAxC,EAAAyC,KAAA,EAAA,EAAAJ,EAAAF,MAAAE,EAAAD,WACA9B,KAAAc,KAAAX,OApCA,CACA,GAAAH,KAAAe,gBAAA,CACA,IAgMA,SAAAqB,EAAAC,GACAN,EAAAK,EAAAnC,OAAA+B,MAAAC,gBACA,OAAA,GAAAI,EAAAzB,GAAAyB,EAAAzB,GAAAmB,EAAAF,OAAA,GAAAQ,EAAAxB,GAAAwB,EAAAxB,GAAAkB,EAAAD,OAlMAQ,CAAAtC,KAAAU,GACA,QAoMA,SAAAN,EAAAG,GACA,IAAAG,EACA6B,EAAA,IAAAA,IAAA,CAAA3B,EAAA,EAAAC,EAAA,IACAH,EAAAH,EAAAgC,GAAAnC,EAAAmC,IACA,GAAA,EAAA7B,IACA,EAAAH,EAAAgC,IACAnC,EAAAmC,IAAAhC,EAAAgC,GAAA,EACAhC,EAAAgC,GAAA,GACAhC,EAAAgC,GAAA,IACAnC,EAAAmC,IAAAhC,EAAAgC,GACAhC,EAAAgC,GAAA,IA5MAC,CAAApC,EAAAG,GAEAP,KAAAyB,cACAzB,KAAA2B,kBAAAjB,EACAV,KAAAc,KAAAY,EAAAhB,EAAAH,EAAAP,KAAA4B,qBAEA5B,KAAAc,KAAA,IAAApB,EAAA+C,cAAA/B,EAAAE,EAAAF,EAAAG,EAAAT,EAAAQ,EAAAR,EAAAS,GAEAb,KAAAiB,UAAA,EA0BAjB,KAAA0C,OAGA,SAAAC,IAGA3C,KAAAc,KAAAe,MAAA,IACA7B,KAAAc,KAAAF,GAAAZ,KAAAc,KAAAe,MACA7B,KAAAc,KAAAe,MAAAN,KAAAqB,IAAA5C,KAAAc,KAAAe,QAEA7B,KAAAc,KAAAgB,OAAA,IACA9B,KAAAc,KAAAD,GAAAb,KAAAc,KAAAgB,OACA9B,KAAAc,KAAAgB,OAAAP,KAAAqB,IAAA5C,KAAAc,KAAAgB,SAIA9B,KAAAC,OAAAC,oBAAA,GACAF,KAAAiB,UAAA,EAGA,SAAA4B,IACA7C,KAAAC,OAAA6C,OAAAC,QAGA,SAAAC,EAAAjD,GACAL,EAAAuD,SAAAjD,KAAAkD,QAAA,YACA,IAAA9C,EAAAJ,KAAAC,OAAAI,SAAAC,sBAAAP,EAAAK,OAAA,GACAJ,KAAAc,KAAAF,GAAAR,EAAAQ,EACAZ,KAAAc,KAAAD,GAAAT,EAAAS,EACAkB,EAAA/B,KAAAC,OAAA+B,MAAAC,gBACAjC,KAAAe,kBAAAf,KAAAc,KAAAoB,OAAA,IAAAxC,EAAAyC,KAAA,EAAA,EAAAJ,EAAAF,MAAAE,EAAAD,WACA9B,KAAAc,KAAAF,GAAAR,EAAAQ,EACAZ,KAAAc,KAAAD,GAAAT,EAAAS,GAEAb,KAAA0C,OAGA,SAAAS,IACAzD,EAAA0D,YAAApD,KAAAkD,QAAA,YAGA,SAAAG,EAAAC,EAAAvD,GACA,IAEAwD,EAFAnD,EAAAL,EAAAK,MACAkB,EAAAtB,KAAAc,KAAA0C,oBAEArD,EAAAH,KAAAe,gBAAAf,KAAAc,KAAAE,QAAA,KAOA,OANA,IAAAM,IAEAlB,EAAAA,EAAAqD,QAAA,EAAAnC,EAAA,IAAA5B,EAAAiB,MAAA,EAAA,IACA4C,EAAAvD,KAAAc,KAAA4C,aAEAtD,EAAAJ,KAAAC,OAAAI,SAAAC,sBAAAF,GAAA,GACAkD,GACA,KAAA,EACAtD,KAAAc,KAAAD,GAAAT,EAAAS,EACAb,KAAAc,KAAAgB,QAAA1B,EAAAS,EACA,MACA,KAAA,EACAb,KAAAc,KAAAe,OAAAzB,EAAAQ,EACA,MACA,KAAA,EACAZ,KAAAc,KAAAgB,QAAA1B,EAAAS,EACA,MACA,KAAA,EACAb,KAAAc,KAAAF,GAAAR,EAAAQ,EACAZ,KAAAc,KAAAe,OAAAzB,EAAAQ,EACA,MACA,IAAA,GACAZ,KAAAc,KAAAD,GAAAT,EAAAS,EACAb,KAAAc,KAAAgB,QAAA1B,EAAAS,EACAb,KAAAc,KAAAF,GAAAR,EAAAQ,EACAZ,KAAAc,KAAAe,OAAAzB,EAAAQ,EACA,MACA,KAAA,IACAZ,KAAAc,KAAAD,GAAAT,EAAAS,EACAb,KAAAc,KAAAgB,QAAA1B,EAAAS,EACAb,KAAAc,KAAAe,OAAAzB,EAAAQ,EACA,MACA,KAAA,IACAZ,KAAAc,KAAAe,OAAAzB,EAAAQ,EACAZ,KAAAc,KAAAgB,QAAA1B,EAAAS,EACA,MACA,KAAA,IACAb,KAAAc,KAAAgB,QAAA1B,EAAAS,EACAb,KAAAc,KAAAF,GAAAR,EAAAQ,EACAZ,KAAAc,KAAAe,OAAAzB,EAAAQ,EAGA,IAAAU,IAMAlB,GAJAuD,EAAA3D,KAAAc,KAAA4C,aAEAD,OAAAnC,EAAAiC,GAEAK,MAAAD,GACA3D,KAAAc,KAAAF,GAAAR,EAAAQ,EACAZ,KAAAc,KAAAD,GAAAT,EAAAS,GAEA,IAAAkB,EAAA/B,KAAAC,OAAA+B,MAAAC,gBACAjC,KAAAe,kBAAAf,KAAAc,KAAAoB,OAAA,IAAAxC,EAAAyC,KAAA,EAAA,EAAAJ,EAAAF,MAAAE,EAAAD,WACA9B,KAAAc,KAAAX,GAEAH,KAAA0C,OAKA,SAAAmB,IACA7D,KAAAc,KAAAe,MAAA,IACA7B,KAAAc,KAAAF,GAAAZ,KAAAc,KAAAe,MACA7B,KAAAc,KAAAe,MAAAN,KAAAqB,IAAA5C,KAAAc,KAAAe,QAEA7B,KAAAc,KAAAgB,OAAA,IACA9B,KAAAc,KAAAD,GAAAb,KAAAc,KAAAgB,OACA9B,KAAAc,KAAAgB,OAAAP,KAAAqB,IAAA5C,KAAAc,KAAAgB,SAIA,SAAAgC,EAAA/D,GACAgE,EAAAhE,EAAAiE,SAAAjE,EAAAkE,SACA,KAAAF,EACA/D,KAAAkE,UACAC,OAAAC,aAAAL,KAAA/D,KAAAqE,kBACArE,KAAAsE,cAIA,SAAA5C,EAAAhB,EAAAH,EAAAuB,GACApB,EAAAE,EAAAL,EAAAK,IAEAA,EAAAF,EACAA,EAAAH,EACAA,EAAAK,GAEA,IAAAR,EAAAG,EAAAqD,MAAAlD,GACA6D,EAAA7D,EAAA8D,WAAAjE,GACAkE,GAAA,EAAAlD,KAAAmD,MAAAtE,EAAAQ,EAAAR,EAAAS,GAAAU,KAAAC,GAAA,EACA+B,EAAA,IAAA7D,EAAAiB,MACAP,EAAAQ,EAAA,EAAAF,EAAAE,EACAR,EAAAS,EAAA,EAAAH,EAAAG,GAEAC,EAAA,IAAApB,EAAA+C,cACAc,EAAA3C,EAAA2D,EAAA,EACAhB,EAAA1C,EAAAiB,EAAA,EACAyC,EACAzC,EACA2C,GAGAE,GADAA,EAAA,IAAAjF,EAAAiB,MAAA,EAAAmB,IACA2B,OAAA3C,EAAA0C,oBAAA,IAAA9D,EAAAiB,MAAA,EAAA,IAGA,OAFAG,EAAAF,GAAA+D,EAAA/D,EAAA,EACAE,EAAAD,GAAA8D,EAAA9D,EAAA,EACAC,EAniBApB,EAAAkF,OAAAC,UAAAC,UAAA,SAAAC,GAMA,OALA/E,KAAAgF,oBAAAD,MACAA,EAAAA,GAAA,IACA9E,OAAAD,MACAgF,kBAAA,IAAAtF,EAAAuF,UAAAF,IAEA/E,KAAAgF,mBAUAtF,EAAAuF,UAAA,SAAAF,GA6EA,IAAAG,EA3EAxF,EAAAyF,QAAA,EAAAnF,KAAA,CAEAC,OAAA,KACAmF,aAAA,EACAC,iBAAA,EACApE,UAAA,EAGAiC,QAAA,KACAoC,aAAA,KACAC,sBAAA,EACAC,wBAAA,EACAC,yBAAA,EACAC,wBAAA,EACArB,iBAAA,IACAvD,KAAA,KACAI,eAAA,EACAO,cAAA,EACAG,mBAAA,GACAb,iBAAA,EACA4E,qBAAA,KACAC,oBAAA,KACAC,kBAAA,KACAC,mBAAA,KACAC,UAAA,KACAC,UAAA,CACAlB,UAAA,CACAmB,KAAA,qBACAC,MAAA,2BACAC,MAAA,sBACAC,KAAA,yBAEAC,iBAAA,CACAJ,KAAA,6BACAC,MAAA,mCACAC,MAAA,8BACAC,KAAA,iCAEAE,gBAAA,CACAL,KAAA,4BACAC,MAAA,kCACAC,MAAA,6BACAC,KAAA,iCAGAG,YAAA,CACA1E,MAAA,MACA2E,MAAA,QAEAC,YAAA,CACAC,IAAA,MACAC,KAAA,MACA9E,MAAA,MACAC,OAAA,MACA8E,OAAA,gBACAC,WAAA,OACAvD,OAAA,kBAEAwD,aAAA,CACAjF,MAAA,MACAC,OAAA,MACA+E,WAAA,OACAvD,OAAA,mBAGAyB,GAEArF,EAAAyF,QAAA,EAAAnF,KAAAgG,UAAAhG,KAAAC,OAAA+F,WAEAhG,KAAAkD,UACAlD,KAAAkD,QAAAxD,EAAAqH,mBAAA,OACA/G,KAAAkD,QAAA8D,MAAAH,WAAA,qBACA7G,KAAAkD,QAAA+D,UAAA,iBAEAjH,KAAAkH,QAAAlH,KAAAkH,SAAA,GAGA,IADA,IAAAC,EAAA,GACAC,EAAA,EAAAA,EAAA,EAAAA,IACApH,KAAAkH,QAAAE,KACApH,KAAAkH,QAAAE,GAAA1H,EAAAqH,mBAAA,OACA/G,KAAAkH,QAAAE,GAAAH,UAAA,UAAAG,EACApH,KAAAkH,QAAAE,GAAAJ,MAAAvG,SAAA,WACAT,KAAAkH,QAAAE,GAAAJ,MAAAnF,MAAA7B,KAAAuG,YAAA1E,MACA7B,KAAAkH,QAAAE,GAAAJ,MAAAlF,OAAA9B,KAAAuG,YAAA1E,MACA7B,KAAAkH,QAAAE,GAAAJ,MAAAH,WAAA7G,KAAAuG,YAAAC,QAGAtB,EAAAxF,EAAAqH,mBAAA,QACAE,UAAA,UAAAG,EAAA,UACAlC,EAAA8B,MAAAvG,SAAA,WACAyE,EAAA8B,MAAAN,IAAA1G,KAAAyG,YAAAC,IACAxB,EAAA8B,MAAAL,KAAA3G,KAAAyG,YAAAE,KACAzB,EAAA8B,MAAAnF,MAAA7B,KAAAyG,YAAA5E,MACAqD,EAAA8B,MAAAlF,OAAA9B,KAAAyG,YAAA3E,OACAoD,EAAA8B,MAAAJ,OAAA5G,KAAAyG,YAAAG,OACA1B,EAAA8B,MAAAH,WAAA7G,KAAAyG,YAAAI,WACA3B,EAAA8B,MAAA1D,OAAAtD,KAAAyG,YAAAnD,OACA,IAAA5D,EAAA2H,aAAA,CACAnE,QAAAlD,KAAAkH,QAAAE,GACAE,YAAAjE,EAAAkE,KAAAvH,KAAAoH,GACAI,eAAA3D,EAAA0D,KAAAvH,KAAAoH,KAGAD,EAAAC,GAAA1H,EAAAqH,mBAAA,OACAI,EAAAC,GAAAH,UAAA,UAAAG,EAAA,UACAD,EAAAC,GAAAJ,MAAAvG,SAAA,WACA0G,EAAAC,GAAAJ,MAAAnF,MAAA7B,KAAA8G,aAAAjF,MACAsF,EAAAC,GAAAJ,MAAAlF,OAAA9B,KAAA8G,aAAAhF,OACAqF,EAAAC,GAAAJ,MAAAH,WAAA7G,KAAA8G,aAAAD,WACAM,EAAAC,GAAAJ,MAAA1D,OAAAtD,KAAA8G,aAAAxD,OACA,IAAA5D,EAAA2H,aAAA,CACAnE,QAAAiE,EAAAC,GACAE,YAAAjE,EAAAkE,KAAAvH,KAAAoH,EAAA,IACAI,eAAA3D,EAAA0D,KAAAvH,KAAAoH,KAGApH,KAAAkH,QAAAE,GAAAK,YAAAvC,GACAlF,KAAAkD,QAAAuE,YAAAzH,KAAAkH,QAAAE,IAEAM,WAAA1H,KAAAkD,QAAAuE,YAAAF,KAAAvH,KAAAkD,QAAAiE,EAAAC,IAAA,GAEApH,KAAAkH,QAAA,GAAAF,MAAAN,IAAA,EACA1G,KAAAkH,QAAA,GAAAF,MAAAnF,MAAA,OACA7B,KAAAkH,QAAA,GAAAF,MAAAW,MAAA,EACA3H,KAAAkH,QAAA,GAAAF,MAAAlF,OAAA,OACA9B,KAAAkH,QAAA,GAAAF,MAAAY,OAAA,EACA5H,KAAAkH,QAAA,GAAAF,MAAAnF,MAAA,OACA7B,KAAAkH,QAAA,GAAAF,MAAAL,KAAA,EACA3G,KAAAkH,QAAA,GAAAF,MAAAlF,OAAA,OACAqF,EAAA,GAAAH,MAAAN,IAAA,OACAS,EAAA,GAAAH,MAAAL,KAAA,OACAQ,EAAA,GAAAH,MAAAN,IAAA,OACAS,EAAA,GAAAH,MAAAW,MAAA,OACAR,EAAA,GAAAH,MAAAY,OAAA,OACAT,EAAA,GAAAH,MAAAW,MAAA,OACAR,EAAA,GAAAH,MAAAY,OAAA,OACAT,EAAA,GAAAH,MAAAL,KAAA,OAEA3G,KAAA6H,UACA7H,KAAA6H,QAAA,IAAAnI,EAAAoI,iBAAA9H,KAAAkD,QAAAlD,KAAAc,MAAA,IAAApB,EAAA+C,gBAGAzC,KAAA+H,aAAA,IAAArI,EAAA2H,aAAA,CACAnE,QAAAlD,KAAAkD,QACA8E,mBAAAhI,KAAAC,OAAA+H,mBACAC,mBAAAjI,KAAAC,OAAAgI,mBACAX,YAAA5H,EAAAwI,SAAAlI,KAAAgD,GACAwE,eAAA9H,EAAAwI,SAAAlI,KAAAmD,GAEAgF,aAAAzI,EAAAwI,SAAAlI,KAAA6C,KAKA7C,KAAAoI,aAAA,IAAA1I,EAAA2H,aAAA,CACAnE,QAAAlD,KAAAC,OAAA6C,OACAkF,mBAAAhI,KAAAC,OAAA+H,mBACAC,mBAAAjI,KAAAC,OAAAgI,mBACAX,YAAA5H,EAAAwI,SAAAlI,KAAAF,GACA0H,eAAA9H,EAAAwI,SAAAlI,KAAA2C,GACAwF,aAAAzI,EAAAwI,SAAAlI,KAAA6C,GACAwF,eAAArI,KAAAoF,cAGApF,KAAAqE,kBACA3E,EAAA4I,SACAtI,KAAAC,OAAAsI,UACA,WACA7I,EAAAwI,SAAAlI,KAAA8D,IACA,GAIA,IAAA0E,EAAAxI,KAAA+F,WAAA/F,KAAAC,OAAA8F,WAAA,GACA0C,EAAAzI,KAAAC,OAAAyI,SAAA1I,KAAAC,OAAAyI,QAAAA,QACAC,EAAAF,EAAAzI,KAAAC,OAAAyI,QAAAA,QAAA,GAAA,KACAE,EAAAD,EAAAA,EAAAE,QAAA,KACAC,EAAAH,EAAAA,EAAAI,OAAA,KACA/I,KAAAuF,uBACAvF,KAAAsF,aAAA,IAAA5F,EAAAsJ,OAAA,CACA9F,QAAAlD,KAAAsF,aAAA5F,EAAAuJ,WAAAjJ,KAAAsF,cAAA,KACA0C,mBAAAhI,KAAAC,OAAA+H,mBACAC,mBAAAjI,KAAAC,OAAAgI,mBACAiB,QAAAxJ,EAAAyJ,UAAA,6BAAA,mBACAC,QAAAZ,EAAAxI,KAAAgG,UAAAlB,UAAAmB,KACAoD,SAAAb,EAAAxI,KAAAgG,UAAAlB,UAAAoB,MACAoD,SAAAd,EAAAxI,KAAAgG,UAAAlB,UAAAqB,MACAoD,QAAAf,EAAAxI,KAAAgG,UAAAlB,UAAAsB,KACAoD,UAAAxJ,KAAAsE,YAAAiD,KAAAvH,MACA6I,QAAAD,EACAG,OAAAD,IAEAL,IACAzI,KAAAC,OAAAyI,QAAAA,QAAAe,KAAAzJ,KAAAsF,cACAtF,KAAAC,OAAAyI,QAAAxF,QAAAuE,YAAAzH,KAAAsF,aAAApC,UAEAlD,KAAAsF,aAAAoE,UACA1J,KAAAqF,gBAAArF,KAAAsF,aAAAoE,QAAAC,WAAA,GACA3J,KAAAsF,aAAApC,QAAAuE,YAAAzH,KAAAqF,mBAGArF,KAAAwF,yBACAxF,KAAA4J,cAAA,IAAAlK,EAAAsJ,OAAA,CACA9F,QAAAlD,KAAA4J,cAAAlK,EAAAuJ,WAAAjJ,KAAA4J,eAAA,KACA5B,mBAAAhI,KAAAC,OAAA+H,mBACAC,mBAAAjI,KAAAC,OAAAgI,mBACAiB,QAAAxJ,EAAAyJ,UAAA,8BAAA,oBACAC,QAAAZ,EAAAxI,KAAAgG,UAAAK,iBAAAJ,KACAoD,SAAAb,EAAAxI,KAAAgG,UAAAK,iBAAAH,MACAoD,SAAAd,EAAAxI,KAAAgG,UAAAK,iBAAAF,MACAoD,QAAAf,EAAAxI,KAAAgG,UAAAK,iBAAAD,KACAoD,UAAAxJ,KAAAkE,QAAAqD,KAAAvH,MACA6I,QAAAD,EACAG,OAAAD,KAEA5E,EAAAlE,KAAA4J,cAAA1G,SACA2G,UAAAC,IAAA,kBACA9J,KAAAkD,QAAAuE,YAAAvD,GAEAlE,KAAA+J,aAAA,IAAArK,EAAAsJ,OAAA,CACA9F,QAAAlD,KAAA+J,aAAArK,EAAAuJ,WAAAjJ,KAAA+J,cAAA,KACA/B,mBAAAhI,KAAAC,OAAA+H,mBACAC,mBAAAjI,KAAAC,OAAAgI,mBACAiB,QAAAxJ,EAAAyJ,UAAA,6BAAA,mBACAC,QAAAZ,EAAAxI,KAAAgG,UAAAM,gBAAAL,KACAoD,SAAAb,EAAAxI,KAAAgG,UAAAM,gBAAAJ,MACAoD,SAAAd,EAAAxI,KAAAgG,UAAAM,gBAAAH,MACAoD,QAAAf,EAAAxI,KAAAgG,UAAAM,gBAAAF,KACAoD,UAAAxJ,KAAAgK,OAAAzC,KAAAvH,MACA6I,QAAAD,EACAG,OAAAD,KAEAkB,EAAAhK,KAAA+J,aAAA7G,SACA2G,UAAAC,IAAA,iBACA9J,KAAAkD,QAAAuE,YAAAuC,GAEAhK,KAAAyF,0BACAvB,EAAA8C,MAAAvG,SAAA,WACAyD,EAAA8C,MAAAN,IAAA,MACAxC,EAAA8C,MAAAL,KAAA,MACAzC,EAAA8C,MAAAiD,UAAA,yBAEAD,EAAAhD,MAAAvG,SAAA,WACAuJ,EAAAhD,MAAAN,IAAA,MACAsD,EAAAhD,MAAAL,KAAA,MACAqD,EAAAhD,MAAAiD,UAAA,uBAIAjK,KAAAC,OAAAiK,WAAA,YAAAlK,KAAA2F,sBACA3F,KAAAC,OAAAiK,WAAA,mBAAAlK,KAAA4F,qBACA5F,KAAAC,OAAAiK,WAAA,mBAAAlK,KAAA6F,mBACA7F,KAAAC,OAAAiK,WAAA,mBAAAlK,KAAA8F,oBAEA9F,KAAAC,OAAAiK,WAAA,OAAAlK,KAAA0C,KAAA6E,KAAAvH,OACAA,KAAAC,OAAAiK,WAAA,YAAAlK,KAAA0C,KAAA6E,KAAAvH,OACAA,KAAAC,OAAAiK,WAAA,SAAAlK,KAAA0C,KAAA6E,KAAAvH,OACAA,KAAAC,OAAAiK,WAAA,SAAAlK,KAAA0C,KAAA6E,KAAAvH,QAGAN,EAAAyF,OAAAzF,EAAAuF,UAAAJ,UAAAnF,EAAAyK,YAAAtF,UAAA,CAEAP,YAAA,WACA,OAAAtE,KAAAoK,UAAApK,KAAAoF,cAGAgF,SAAA,SAAAC,GASA,OARArK,KAAAoF,YAAAiF,EAEArK,KAAAoI,aAAAkC,YAAAD,GACAA,EAAArK,KAAA0C,OAAA1C,KAAAuK,SACAvK,KAAAqF,kBACArF,KAAAqF,gBAAA2B,MAAAwD,WAAAH,EAAA,UAAA,UAEArK,KAAAC,OAAAwK,WAAA,mBAAA,CAAAJ,QAAAA,IACArK,MAGA0K,iBAAA,SAAAxJ,GACAlB,KAAAkB,cAAAA,GAGAyJ,OAAA,WACA,OAAA3K,KAAAoK,UAAA,IAGAQ,QAAA,WACA,OAAA5K,KAAAoK,UAAA,IAGA1H,KAAA,WAMA,OALA1C,KAAAc,OACAd,KAAA6H,QAAAgD,OAAA7K,KAAAc,KAAAgK,aACA9K,KAAA6H,QAAAkD,SAAA/K,KAAAC,OAAA+K,OAAAzC,UAAAvI,KAAAC,OAAAI,WAEAL,KAAAC,OAAAwK,WAAA,mBAAAzK,KAAAc,KAAAd,KAAAc,KAAAgK,YAAA,MACA9K,MAGAuK,OAAA,WAGA,OAFAvK,KAAA6H,QAAAoD,UACAjL,KAAAc,KAAA,KACAd,MAGAkE,QAAA,WACA,IACAgH,EAGAC,EAOA,OAXAnL,KAAAc,OACAoK,EAAAlL,KAAAc,KAAAgK,YACA9K,KAAA0F,yBACAyF,EAAAnL,KAAAC,OAAAI,SAAA+K,yBAAAF,IACAC,EAAAzL,EAAA+C,cAAA4I,SAAAF,GAAAG,SACAhK,SAAA4J,EAAA5J,SACA4J,EAAAC,GAEAnL,KAAAC,OAAAwK,WAAA,YAAAS,GACAlL,KAAAuK,UAEAvK,MAGAgK,OAAA,WAQA,OAHAhK,KAAAoI,aAAAkC,aAAA,GACAtK,KAAAoI,aAAAkC,aAAA,GACAtK,KAAAC,OAAAwK,WAAA,oBAAA,GACAzK,KAAAuK,YAjWA,CAkkBA/K,eCpkBA,SAAAE,gBAwBAA,EAAAoI,iBAAA,SAAA5E,EAAAqI,GACA7L,EAAA8L,QAAAC,MAAAzL,KAAA0L,WAGAhM,EAAAiM,cAAAzI,GACAlD,KAAAsB,SAAA4B,EAAAqI,SAAAjK,UAAA,EAEAtB,KAAAsB,SAAAiK,EAAAjK,UAAA,GAIA5B,EAAAoI,iBAAAjD,UAAAnF,EAAAyF,OAAAyG,OAAAC,OAAAnM,EAAA8L,QAAA3G,WAAA,CAMAkG,SAAA,WACArL,EAAA8L,QAAA3G,UAAAkG,SAAAU,MAAAzL,KAAA0L,WACA1L,KAAAgH,MAAAiD,UAAAjK,KAAAgH,MAAAiD,UAAA6B,QAAA,oBAAA,IACA,WAAA9L,KAAAsB,SAAA,QAQAuJ,OAAA,SAAAU,GACA7L,EAAA8L,QAAA3G,UAAAgG,OAAAY,MAAAzL,KAAA0L,WACA1L,KAAAsB,SAAAiK,EAAAjK,UAAA,KAtDA,CA0DA9B,eC1DA,SAAAE,gBAgBAA,EAAA+C,cAAA,SAAA7B,EAAAC,EAAAgB,EAAAC,EAAAR,GACA5B,EAAAyC,KAAAsJ,MAAAzL,KAAA,CAAAY,EAAAC,EAAAgB,EAAAC,IAOA9B,KAAAsB,SAAAA,GAAA,GAGA5B,EAAA+C,cAAA4I,SAAA,SAAAvK,GACA,OAAA,IAAApB,EAAA+C,cACA3B,EAAAF,EACAE,EAAAD,EACAC,EAAAe,MACAf,EAAAgB,SAIApC,EAAA+C,cAAAoC,UAAAnF,EAAAyF,OAAAyG,OAAAC,OAAAnM,EAAAyC,KAAA0C,WAAA,CAMA7D,MAAA,WACA,OAAA,IAAAtB,EAAA+C,cAAAzC,KAAAY,EAAAZ,KAAAa,EAAAb,KAAA6B,MAAA7B,KAAA8B,OAAA9B,KAAAsB,WASAyK,OAAA,SAAAC,GACA,OAAAtM,EAAAyC,KAAA0C,UAAAkH,OAAAN,MAAAzL,KAAA,CAAAgM,KACAhM,KAAAsB,WAAA0K,EAAA1K,UASA2K,SAAA,WACA,MAAA,IACA1K,KAAA+J,MAAA,IAAAtL,KAAAY,GAAA,IAAA,IACAW,KAAA+J,MAAA,IAAAtL,KAAAa,GAAA,IAAA,IACAU,KAAA+J,MAAA,IAAAtL,KAAA6B,OAAA,IAAA,IACAN,KAAA+J,MAAA,IAAAtL,KAAA8B,QAAA,IAAA,IACAP,KAAA+J,MAAA,IAAAtL,KAAAsB,UAAA,IACA,KAGA4K,gBAAA,WACA,IAAAC,EAAAnM,KAAAgB,QAKA,OAJAmL,EAAAtK,MAAA7B,KAAA8B,OACAqK,EAAArK,OAAA9B,KAAA6B,MACAsK,EAAAvL,IAAAZ,KAAA6B,MAAA7B,KAAA8B,QAAA,EACAqK,EAAAtL,IAAAb,KAAA8B,OAAA9B,KAAA6B,OAAA,EACAsK,GAOA3I,kBAAA,WACA,OAAAxD,KAAAsB,UAAA,IAAAC,KAAAC,KAQAJ,mBAAA,SAAAiB,GACA+J,EAAA/J,EAAAuB,MAAA5D,KAAA0D,aACA,OAAAnC,KAAAmD,MAAA0H,EAAAxL,EAAAwL,EAAAvL,IAQAyK,MAAA,WACA,OAAA,IAAA5L,EAAA+C,cACAlB,KAAA+J,MAAAtL,KAAAY,GACAW,KAAA+J,MAAAtL,KAAAa,GACAU,KAAA+J,MAAAtL,KAAA6B,OACAN,KAAA+J,MAAAtL,KAAA8B,QACA9B,KAAAsB,WASAwJ,UAAA,WACA,IAAAuB,EAAArM,KAAAgB,QAUA,OATAqL,EAAAxK,MAAA,IACAwK,EAAAzL,GAAAyL,EAAAxK,MACAwK,EAAAxK,QAAA,GAEAwK,EAAAvK,OAAA,IACAuK,EAAAxL,GAAAwL,EAAAvK,OACAuK,EAAAvK,SAAA,GAEAuK,EAAA/K,UAAAC,KAAAC,GACA6K,GAQAnK,OAAA,SAAAoK,GAWA,IAVA,IAAAxL,EAAAd,KAAA8K,YACA3D,EAAA,CACArG,EAAAyL,aACAzL,EAAA0L,cACA1L,EAAA2L,iBACA3L,EAAA4L,iBAEAnJ,EAAAzC,EAAA4C,YACApC,EAAAR,EAAA0C,oBACAmJ,EAAAL,EAAAG,iBACArF,EAAA,EAAAA,EAAA,EAAAA,IAEA,GADAD,EAAAC,GAAAD,EAAAC,GAAA3D,OAAAnC,EAAAiC,GACA4D,EAAAC,GAAAxG,EAAA0L,EAAA1L,GAAAuG,EAAAC,GAAAxG,EAAA+L,EAAA/L,GACAuG,EAAAC,GAAAvG,EAAAyL,EAAAzL,GAAAsG,EAAAC,GAAAvG,EAAA8L,EAAA9L,EACA,OAAA,EAGA,OAAA,GAQA+L,eAAA,WACA,IAAAC,EAUA,OATA7M,KAAAsB,SAAAC,KAAAC,IAAA,GACAqL,EAAA7M,KAAAkM,mBACA5K,UAAAC,KAAAC,GAAA,EACAxB,KAAAsB,SAAAC,KAAAC,GAAA,GACAqL,EAAA7M,KAAAkM,mBACA5K,UAAAC,KAAAC,GAAA,EAEAqL,EAAA7M,KAAAgB,QAEA6L,KAhLA,CAoLArN","file":"openseadragonselection.js","sourcesContent":["var OpenSeadragon = require('openseadragon');\n\n(function($) {\n    'use strict';\n\n    if (!$.version || $.version.major < 2) {\n        throw new Error('This version of OpenSeadragonSelection requires OpenSeadragon version 2.0.0+');\n    }\n\n    $.Viewer.prototype.selection = function(options) {\n        if (!this.selectionInstance || options) {\n            options = options || {};\n            options.viewer = this;\n            this.selectionInstance = new $.Selection(options);\n        }\n        return this.selectionInstance;\n    };\n\n\n    /**\n    * @class Selection\n    * @classdesc Provides functionality for selecting part of an image\n    * @memberof OpenSeadragon\n    * @param {Object} options\n    */\n    $.Selection = function ( options ) {\n\n        $.extend( true, this, {\n            // internal state properties\n            viewer:                  null,\n            isSelecting:             false,\n            buttonActiveImg:         false,\n            rectDone:                true,\n\n            // options\n            element:                 null,\n            toggleButton:            null,\n            showSelectionControl:    true,\n            showConfirmDenyButtons:  true,\n            styleConfirmDenyButtons: true,\n            returnPixelCoordinates:  true,\n            keyboardShortcut:        'c',\n            rect:                    null,\n            allowRotation:           true,\n            startRotated:            false, // useful for rotated crops\n            startRotatedHeight:      0.1,\n            restrictToImage:         false,\n            onSelectionConfirmed:    null,\n            onSelectionCanceled:     null,\n            onSelectionChange:       null,\n            onSelectionToggled:      null,\n            prefixUrl:               null,\n            navImages:               {\n                selection: {\n                    REST:   'selection_rest.png',\n                    GROUP:  'selection_grouphover.png',\n                    HOVER:  'selection_hover.png',\n                    DOWN:   'selection_pressed.png'\n                },\n                selectionConfirm: {\n                    REST:   'selection_confirm_rest.png',\n                    GROUP:  'selection_confirm_grouphover.png',\n                    HOVER:  'selection_confirm_hover.png',\n                    DOWN:   'selection_confirm_pressed.png'\n                },\n                selectionCancel: {\n                    REST:   'selection_cancel_rest.png',\n                    GROUP:  'selection_cancel_grouphover.png',\n                    HOVER:  'selection_cancel_hover.png',\n                    DOWN:   'selection_cancel_pressed.png'\n                },\n            },\n            borderStyle: {\n                width:      '1px',\n                color:      '#fff'\n            },\n            handleStyle: {\n                top:        '50%',\n                left:       '50%',\n                width:      '6px',\n                height:     '6px',\n                margin:     '-4px 0 0 -4px',\n                background: '#000',\n                border:     '1px solid #ccc'\n            },\n            cornersStyle: {\n                width:      '6px',\n                height:     '6px',\n                background: '#000',\n                border:     '1px solid #ccc'\n            }\n\n        }, options );\n\n        $.extend( true, this.navImages, this.viewer.navImages );\n\n        if (!this.element) {\n            this.element = $.makeNeutralElement('div');\n            this.element.style.background = 'rgba(0, 0, 0, 0.1)';\n            this.element.className        = 'selection-box';\n        }\n        this.borders = this.borders || [];\n        var handle;\n        var corners = [];\n        for (var i = 0; i < 4; i++) {\n            if (!this.borders[i]) {\n                this.borders[i]                  = $.makeNeutralElement('div');\n                this.borders[i].className        = 'border-' + i;\n                this.borders[i].style.position   = 'absolute';\n                this.borders[i].style.width      = this.borderStyle.width;\n                this.borders[i].style.height     = this.borderStyle.width;\n                this.borders[i].style.background = this.borderStyle.color;\n            }\n\n            handle                  = $.makeNeutralElement('div');\n            handle.className        = 'border-' + i + '-handle';\n            handle.style.position   = 'absolute';\n            handle.style.top        = this.handleStyle.top;\n            handle.style.left       = this.handleStyle.left;\n            handle.style.width      = this.handleStyle.width;\n            handle.style.height     = this.handleStyle.height;\n            handle.style.margin     = this.handleStyle.margin;\n            handle.style.background = this.handleStyle.background;\n            handle.style.border     = this.handleStyle.border;\n            new $.MouseTracker({\n                element:     this.borders[i],\n                dragHandler: onBorderDrag.bind(this, i),\n                dragEndHandler: onBorderDragEnd.bind(this, i),\n            });\n\n            corners[i]                  = $.makeNeutralElement('div');\n            corners[i].className        = 'corner-' + i + '-handle';\n            corners[i].style.position   = 'absolute';\n            corners[i].style.width      = this.cornersStyle.width;\n            corners[i].style.height     = this.cornersStyle.height;\n            corners[i].style.background = this.cornersStyle.background;\n            corners[i].style.border     = this.cornersStyle.border;\n            new $.MouseTracker({\n                element:     corners[i],\n                dragHandler: onBorderDrag.bind(this, i + 0.5),\n                dragEndHandler: onBorderDragEnd.bind(this, i),\n            });\n\n            this.borders[i].appendChild(handle);\n            this.element.appendChild(this.borders[i]);\n            // defer corners, so they are appended last\n            setTimeout(this.element.appendChild.bind(this.element, corners[i]), 0);\n        }\n        this.borders[0].style.top = 0;\n        this.borders[0].style.width = '100%';\n        this.borders[1].style.right = 0;\n        this.borders[1].style.height = '100%';\n        this.borders[2].style.bottom = 0;\n        this.borders[2].style.width = '100%';\n        this.borders[3].style.left = 0;\n        this.borders[3].style.height = '100%';\n        corners[0].style.top = '-3px';\n        corners[0].style.left = '-3px';\n        corners[1].style.top = '-3px';\n        corners[1].style.right = '-3px';\n        corners[2].style.bottom = '-3px';\n        corners[2].style.right = '-3px';\n        corners[3].style.bottom = '-3px';\n        corners[3].style.left = '-3px';\n\n        if (!this.overlay) {\n            this.overlay = new $.SelectionOverlay(this.element, this.rect || new $.SelectionRect());\n        }\n\n        this.innerTracker = new $.MouseTracker({\n            element:            this.element,\n            clickTimeThreshold: this.viewer.clickTimeThreshold,\n            clickDistThreshold: this.viewer.clickDistThreshold,\n            dragHandler:        $.delegate( this, onInsideDrag ),\n            dragEndHandler:     $.delegate( this, onInsideDragEnd ),\n            // keyHandler:         $.delegate( this, onKeyPress ),\n            clickHandler:       $.delegate( this, onClick ),\n            // scrollHandler:      $.delegate( this.viewer, this.viewer.innerTracker.scrollHandler ),\n            // pinchHandler:       $.delegate( this.viewer, this.viewer.innerTracker.pinchHandler ),\n        });\n\n        this.outerTracker = new $.MouseTracker({\n            element:            this.viewer.canvas,\n            clickTimeThreshold: this.viewer.clickTimeThreshold,\n            clickDistThreshold: this.viewer.clickDistThreshold,\n            dragHandler:        $.delegate( this, onOutsideDrag ),\n            dragEndHandler:     $.delegate( this, onOutsideDragEnd ),\n            clickHandler:       $.delegate( this, onClick ),\n            startDisabled:      !this.isSelecting,\n        });\n\n        if (this.keyboardShortcut) {\n            $.addEvent(\n                this.viewer.container,\n                'keypress',\n                $.delegate(this, onKeyPress),\n                false\n            );\n        }\n\n        var prefix = this.prefixUrl || this.viewer.prefixUrl || '';\n        var useGroup = this.viewer.buttons && this.viewer.buttons.buttons;\n        var anyButton = useGroup ? this.viewer.buttons.buttons[0] : null;\n        var onFocusHandler = anyButton ? anyButton.onFocus : null;\n        var onBlurHandler = anyButton ? anyButton.onBlur : null;\n        if (this.showSelectionControl) {\n            this.toggleButton = new $.Button({\n                element:    this.toggleButton ? $.getElement( this.toggleButton ) : null,\n                clickTimeThreshold: this.viewer.clickTimeThreshold,\n                clickDistThreshold: this.viewer.clickDistThreshold,\n                tooltip:    $.getString('Tooltips.SelectionToggle') || 'Toggle selection',\n                srcRest:    prefix + this.navImages.selection.REST,\n                srcGroup:   prefix + this.navImages.selection.GROUP,\n                srcHover:   prefix + this.navImages.selection.HOVER,\n                srcDown:    prefix + this.navImages.selection.DOWN,\n                onRelease:  this.toggleState.bind( this ),\n                onFocus:    onFocusHandler,\n                onBlur:     onBlurHandler\n            });\n            if (useGroup) {\n                this.viewer.buttons.buttons.push(this.toggleButton);\n                this.viewer.buttons.element.appendChild(this.toggleButton.element);\n            }\n            if (this.toggleButton.imgDown) {\n                this.buttonActiveImg = this.toggleButton.imgDown.cloneNode(true);\n                this.toggleButton.element.appendChild(this.buttonActiveImg);\n            }\n        }\n        if (this.showConfirmDenyButtons) {\n            this.confirmButton = new $.Button({\n                element:    this.confirmButton ? $.getElement( this.confirmButton ) : null,\n                clickTimeThreshold: this.viewer.clickTimeThreshold,\n                clickDistThreshold: this.viewer.clickDistThreshold,\n                tooltip:    $.getString('Tooltips.SelectionConfirm') || 'Confirm selection',\n                srcRest:    prefix + this.navImages.selectionConfirm.REST,\n                srcGroup:   prefix + this.navImages.selectionConfirm.GROUP,\n                srcHover:   prefix + this.navImages.selectionConfirm.HOVER,\n                srcDown:    prefix + this.navImages.selectionConfirm.DOWN,\n                onRelease:  this.confirm.bind( this ),\n                onFocus:    onFocusHandler,\n                onBlur:     onBlurHandler\n            });\n            var confirm = this.confirmButton.element;\n            confirm.classList.add('confirm-button');\n            this.element.appendChild(confirm);\n\n            this.cancelButton = new $.Button({\n                element:    this.cancelButton ? $.getElement( this.cancelButton ) : null,\n                clickTimeThreshold: this.viewer.clickTimeThreshold,\n                clickDistThreshold: this.viewer.clickDistThreshold,\n                tooltip:    $.getString('Tooltips.SelectionCancel') || 'Cancel selection',\n                srcRest:    prefix + this.navImages.selectionCancel.REST,\n                srcGroup:   prefix + this.navImages.selectionCancel.GROUP,\n                srcHover:   prefix + this.navImages.selectionCancel.HOVER,\n                srcDown:    prefix + this.navImages.selectionCancel.DOWN,\n                onRelease:  this.cancel.bind( this ),\n                onFocus:    onFocusHandler,\n                onBlur:     onBlurHandler\n            });\n            var cancel = this.cancelButton.element;\n            cancel.classList.add('cancel-button');\n            this.element.appendChild(cancel);\n\n            if (this.styleConfirmDenyButtons) {\n                confirm.style.position = 'absolute';\n                confirm.style.top = '50%';\n                confirm.style.left = '50%';\n                confirm.style.transform = 'translate(-100%, -50%)';\n\n                cancel.style.position = 'absolute';\n                cancel.style.top = '50%';\n                cancel.style.left = '50%';\n                cancel.style.transform = 'translate(0, -50%)';\n            }\n        }\n\n        this.viewer.addHandler('selection', this.onSelectionConfirmed);\n        this.viewer.addHandler('selection_cancel', this.onSelectionCanceled);\n        this.viewer.addHandler('selection_change', this.onSelectionChange);\n        this.viewer.addHandler('selection_toggle', this.onSelectionToggled);\n\n        this.viewer.addHandler('open', this.draw.bind(this));\n        this.viewer.addHandler('animation', this.draw.bind(this));\n        this.viewer.addHandler('resize', this.draw.bind(this));\n        this.viewer.addHandler('rotate', this.draw.bind(this));\n    };\n\n    $.extend( $.Selection.prototype, $.ControlDock.prototype, /** @lends OpenSeadragon.Selection.prototype */{\n\n        toggleState: function() {\n            return this.setState(!this.isSelecting);\n        },\n\n        setState: function(enabled) {\n            this.isSelecting = enabled;\n            // this.viewer.innerTracker.setTracking(!enabled);\n            this.outerTracker.setTracking(enabled);\n            enabled ? this.draw() : this.undraw();\n            if (this.buttonActiveImg) {\n                this.buttonActiveImg.style.visibility = enabled ? 'visible' : 'hidden';\n            }\n            this.viewer.raiseEvent('selection_toggle', {enabled: enabled});\n            return this;\n        },\n\n        setAllowRotation: function(allowRotation) {\n            this.allowRotation = allowRotation;\n        },\n\n        enable: function() {\n            return this.setState(true);\n        },\n\n        disable: function() {\n            return this.setState(false);\n        },\n\n        draw: function() {\n            if (this.rect) {\n                this.overlay.update(this.rect.normalize());\n                this.overlay.drawHTML(this.viewer.drawer.container, this.viewer.viewport);\n            }\n            this.viewer.raiseEvent('selection_change', this.rect ? this.rect.normalize() : null);\n            return this;\n        },\n\n        undraw: function() {\n            this.overlay.destroy();\n            this.rect = null;\n            return this;\n        },\n\n        confirm: function() {\n            if (this.rect) {\n                var result = this.rect.normalize();\n                if (this.returnPixelCoordinates) {\n                    var real = this.viewer.viewport.viewportToImageRectangle(result);\n                    real = $.SelectionRect.fromRect(real).round();\n                    real.rotation = result.rotation;\n                    result = real;\n                }\n                this.viewer.raiseEvent('selection', result);\n                this.undraw();\n            }\n            return this;\n        },\n\n        cancel: function() {\n            /*\n             * These two lines have been added to fix a issue with mobile where the selection is just a pinpoint after the first drag\n             * For some reason disabling then re-enabling the tracking fixes this issue.\n             */\n            this.outerTracker.setTracking(false);\n            this.outerTracker.setTracking(true);\n            this.viewer.raiseEvent('selection_cancel', false);\n            return this.undraw();\n        },\n    });\n\n    function onOutsideDrag(e) {\n        // Disable move when makeing new selection\n        this.viewer.setMouseNavEnabled(false);\n        var delta = this.viewer.viewport.deltaPointsFromPixels(e.delta, true);\n        var end = this.viewer.viewport.pointFromPixel(e.position, true);\n        var start = new $.Point(end.x - delta.x, end.y - delta.y);\n        if (!this.rect) {\n            if (this.restrictToImage) {\n                if (!pointIsInImage(this, start)) {\n                    return;\n                }\n                restrictVector(delta, end);\n            }\n            if (this.startRotated) {\n                this.rotatedStartPoint = start;\n                this.rect = getPrerotatedRect(start, end, this.startRotatedHeight);\n            } else {\n                this.rect = new $.SelectionRect(start.x, start.y, delta.x, delta.y);\n            }\n            this.rectDone = false;\n        } else {\n            var oldRect;\n            if (this.restrictToImage) {\n                oldRect = this.rect.clone();\n            }\n            if (this.rectDone) {\n                // All rotation as needed.\n                if (this.allowRotation) {\n                    var angle1 = this.rect.getAngleFromCenter(start);\n                    var angle2 = this.rect.getAngleFromCenter(end);\n                    this.rect.rotation = (this.rect.rotation + angle1 - angle2) % Math.PI;\n                }\n            } else {\n                if (this.startRotated) {\n                    this.rect = getPrerotatedRect(this.rotatedStartPoint, end, this.startRotatedHeight);\n                } else {\n                    this.rect.width += delta.x;\n                    this.rect.height += delta.y;\n                }\n            }\n            var bounds = this.viewer.world.getHomeBounds();\n            if (this.restrictToImage && !this.rect.fitsIn(new $.Rect(0, 0, bounds.width, bounds.height))) {\n                this.rect = oldRect;\n            }\n        }\n        this.draw();\n    }\n\n    function onOutsideDragEnd() {\n        // Resizing a selection will function\n        // when drawn any direction\n        if (this.rect.width < 0){\n            this.rect.x += this.rect.width;\n            this.rect.width = Math.abs(this.rect.width);\n        }\n        if (this.rect.height < 0){\n            this.rect.y += this.rect.height;\n            this.rect.height = Math.abs(this.rect.height);\n        }\n        \n        // Eable move after new selection is done\n        this.viewer.setMouseNavEnabled(true);\n        this.rectDone = true;\n    }\n\n    function onClick() {\n        this.viewer.canvas.focus();\n    }\n\n    function onInsideDrag(e) {\n        $.addClass(this.element, 'dragging');\n        var delta = this.viewer.viewport.deltaPointsFromPixels(e.delta, true);\n        this.rect.x += delta.x;\n        this.rect.y += delta.y;\n        var bounds = this.viewer.world.getHomeBounds();\n        if (this.restrictToImage && !this.rect.fitsIn(new $.Rect(0, 0, bounds.width, bounds.height))) {\n            this.rect.x -= delta.x;\n            this.rect.y -= delta.y;\n        }\n        this.draw();\n    }\n\n    function onInsideDragEnd() {\n        $.removeClass(this.element, 'dragging');\n    }\n\n    function onBorderDrag(border, e) {\n        var delta = e.delta;\n        var rotation = this.rect.getDegreeRotation();\n        var center;\n        var oldRect = this.restrictToImage ? this.rect.clone() : null;\n        if (rotation !== 0) {\n            // adjust vector\n            delta = delta.rotate(-1 * rotation, new $.Point(0, 0));\n            center = this.rect.getCenter();\n        }\n        delta = this.viewer.viewport.deltaPointsFromPixels(delta, true);\n        switch (border) {\n            case 0:\n                this.rect.y += delta.y;\n                this.rect.height -= delta.y;\n                break;\n            case 1:\n                this.rect.width += delta.x;\n                break;\n            case 2:\n                this.rect.height += delta.y;\n                break;\n            case 3:\n                this.rect.x += delta.x;\n                this.rect.width -= delta.x;\n                break;\n            case 0.5:\n                this.rect.y += delta.y;\n                this.rect.height -= delta.y;\n                this.rect.x += delta.x;\n                this.rect.width -= delta.x;\n                break;\n            case 1.5:\n                this.rect.y += delta.y;\n                this.rect.height -= delta.y;\n                this.rect.width += delta.x;\n                break;\n            case 2.5:\n                this.rect.width += delta.x;\n                this.rect.height += delta.y;\n                break;\n            case 3.5:\n                this.rect.height += delta.y;\n                this.rect.x += delta.x;\n                this.rect.width -= delta.x;\n                break;\n        }\n        if (rotation !== 0) {\n            // calc center deviation\n            var newCenter = this.rect.getCenter();\n            // rotate new center around old\n            var target = newCenter.rotate(rotation, center);\n            // adjust new center\n            delta = target.minus(newCenter);\n            this.rect.x += delta.x;\n            this.rect.y += delta.y;\n        }\n        var bounds = this.viewer.world.getHomeBounds();\n        if (this.restrictToImage && !this.rect.fitsIn(new $.Rect(0, 0, bounds.width, bounds.height))) {\n            this.rect = oldRect;\n        }\n        this.draw();\n    }\n    \n    // After you have completed dragging, ensure the top left of the selection\n    // box is still the top left corner of the box\n    function onBorderDragEnd(){\n        if (this.rect.width < 0){\n            this.rect.x += this.rect.width;\n            this.rect.width = Math.abs(this.rect.width);\n        }\n        if (this.rect.height < 0){\n            this.rect.y += this.rect.height;\n            this.rect.height = Math.abs(this.rect.height);\n        }\n    }\n\n    function onKeyPress(e) {\n        var key = e.keyCode ? e.keyCode : e.charCode;\n        if (key === 13) {\n            this.confirm();\n        } else if (String.fromCharCode(key) === this.keyboardShortcut) {\n            this.toggleState();\n        }\n    }\n\n    function getPrerotatedRect(start, end, height) {\n        if (start.x > end.x) {\n            // always draw left to right\n            var x = start;\n            start = end;\n            end = x;\n        }\n        var delta = end.minus(start);\n        var dist = start.distanceTo(end);\n        var angle = -1 * Math.atan2(delta.x, delta.y) + (Math.PI / 2);\n        var center = new $.Point(\n            delta.x / 2 + start.x,\n            delta.y / 2 + start.y\n        );\n        var rect = new $.SelectionRect(\n            center.x - (dist / 2),\n            center.y - (height / 2),\n            dist,\n            height,\n            angle\n        );\n        var heightModDelta = new $.Point(0, height);\n        heightModDelta = heightModDelta.rotate(rect.getDegreeRotation(), new $.Point(0, 0));\n        rect.x += heightModDelta.x / 2;\n        rect.y += heightModDelta.y / 2;\n        return rect;\n    }\n\n    function pointIsInImage(self, point) {\n        var bounds = self.viewer.world.getHomeBounds();\n        return point.x >= 0 && point.x <= bounds.width && point.y >= 0 && point.y <= bounds.height;\n    }\n\n    function restrictVector(delta, end) {\n        var start;\n        for (var prop in {x: 0, y: 0}) {\n            start = end[prop] - delta[prop];\n            if (start < 1 && start > 0) {\n                if (end[prop] > 1) {\n                    delta[prop] -= end[prop] - 1;\n                    end[prop] = 1;\n                } else if (end[prop] < 0) {\n                    delta[prop] -= end[prop];\n                    end[prop] = 0;\n                }\n            }\n        }\n    }\n\n})(OpenSeadragon);\n","(function( $ ){\n    'use strict';\n\n    /**\n     * @class Overlay\n     * @classdesc Provides a way to float an HTML element on top of the viewer element.\n     *\n     * @memberof OpenSeadragon\n     * @param {Object} options\n     * @param {Element} options.element\n     * @param {OpenSeadragon.Point|OpenSeadragon.Rect|OpenSeadragon.SelectionRect} options.location - The\n     * location of the overlay on the image. If a {@link OpenSeadragon.Point}\n     * is specified, the overlay will keep a constant size independently of the\n     * zoom. If a {@link OpenSeadragon.Rect} is specified, the overlay size will\n     * be adjusted when the zoom changes.\n     * @param {OpenSeadragon.OverlayPlacement} [options.placement=OpenSeadragon.OverlayPlacement.TOP_LEFT]\n     * Relative position to the viewport.\n     * Only used if location is a {@link OpenSeadragon.Point}.\n     * @param {OpenSeadragon.Overlay.OnDrawCallback} [options.onDraw]\n     * @param {Boolean} [options.checkResize=true] Set to false to avoid to\n     * check the size of the overlay everytime it is drawn when using a\n     * {@link OpenSeadragon.Point} as options.location. It will improve\n     * performances but will cause a misalignment if the overlay size changes.\n     */\n    $.SelectionOverlay = function( element, location) {\n        $.Overlay.apply( this, arguments );\n\n        // set the rotation in radians\n        if ( $.isPlainObject( element ) ) {\n            this.rotation = element.location.rotation || 0;\n        } else {\n            this.rotation = location.rotation || 0;\n        }\n    };\n\n    $.SelectionOverlay.prototype = $.extend( Object.create($.Overlay.prototype), {\n\n        /**\n         * @function\n         * @param {Element} container\n         */\n        drawHTML: function() {\n            $.Overlay.prototype.drawHTML.apply( this, arguments );\n            this.style.transform = this.style.transform.replace(/ ?rotate\\(.+rad\\)/, '') +\n                ' rotate(' + this.rotation + 'rad)';\n        },\n\n        /**\n         * @function\n         * @param {OpenSeadragon.Point|OpenSeadragon.Rect} location\n         * @param {OpenSeadragon.OverlayPlacement} position\n         */\n        update: function( location ) {\n            $.Overlay.prototype.update.apply( this, arguments );\n            this.rotation = location.rotation || 0;\n        }\n    });\n\n}( OpenSeadragon ));\n","(function( $ ){\n    'use strict';\n\n    /**\n     * @class SelectionRect\n     * @classdesc A display rectangle is very similar to {@link OpenSeadragon.Rect} but adds rotation\n     * around the center point\n     *\n     * @memberof OpenSeadragon\n     * @extends OpenSeadragon.Rect\n     * @param {Number} x The vector component 'x'.\n     * @param {Number} y The vector component 'y'.\n     * @param {Number} width The vector component 'height'.\n     * @param {Number} height The vector component 'width'.\n     * @param {Number} rotation The rotation in radians\n     */\n    $.SelectionRect = function( x, y, width, height, rotation ) {\n        $.Rect.apply( this, [ x, y, width, height ] );\n\n        /**\n         * The rotation in radians\n         * @member {Number} rotation\n         * @memberof OpenSeadragon.SelectionRect#\n         */\n        this.rotation = rotation || 0;\n    };\n\n    $.SelectionRect.fromRect = function(rect) {\n        return new $.SelectionRect(\n            rect.x,\n            rect.y,\n            rect.width,\n            rect.height\n        );\n    };\n\n    $.SelectionRect.prototype = $.extend( Object.create($.Rect.prototype), {\n\n        /**\n         * @function\n         * @returns {OpenSeadragon.Rect} a duplicate of this Rect\n         */\n        clone: function() {\n            return new $.SelectionRect(this.x, this.y, this.width, this.height, this.rotation);\n        },\n\n        /**\n         * Determines if two Rectangles have equivalent components.\n         * @function\n         * @param {OpenSeadragon.Rect} rectangle The Rectangle to compare to.\n         * @return {Boolean} 'true' if all components are equal, otherwise 'false'.\n         */\n        equals: function( other ) {\n            return $.Rect.prototype.equals.apply(this, [ other ]) &&\n                ( this.rotation === other.rotation );\n        },\n\n        /**\n         * Provides a string representation of the rectangle which is useful for\n         * debugging.\n         * @function\n         * @returns {String} A string representation of the rectangle.\n         */\n        toString: function() {\n            return '[' +\n                (Math.round(this.x*100) / 100) + ',' +\n                (Math.round(this.y*100) / 100) + ',' +\n                (Math.round(this.width*100) / 100) + 'x' +\n                (Math.round(this.height*100) / 100) + '@' +\n                (Math.round(this.rotation*100) / 100) +\n            ']';\n        },\n\n        swapWidthHeight: function() {\n            var swapped = this.clone();\n            swapped.width = this.height;\n            swapped.height = this.width;\n            swapped.x += (this.width - this.height) / 2;\n            swapped.y += (this.height - this.width) / 2;\n            return swapped;\n        },\n\n        /**\n         * @function\n         * @returns {Number} The rotaion in degrees\n         */\n        getDegreeRotation: function() {\n            return this.rotation * (180/Math.PI);\n        },\n\n        /**\n         * @function\n         * @param {OpenSeadragon.Point} point\n         * @returns {Number} The angle in radians\n         */\n        getAngleFromCenter: function(point) {\n            var diff = point.minus(this.getCenter());\n            return Math.atan2(diff.x, diff.y);\n        },\n\n        /**\n         * Rounds pixel coordinates\n         * @function\n         * @returns {SelectionRect} The altered rect\n         */\n        round: function() {\n            return new $.SelectionRect(\n                Math.round(this.x),\n                Math.round(this.y),\n                Math.round(this.width),\n                Math.round(this.height),\n                this.rotation\n            );\n        },\n\n        /**\n         * Fixes negative width/height, rotation larger than PI\n         * @function\n         * @returns {SelectionRect} The normalized rect\n         */\n        normalize: function() {\n            var fixed = this.clone();\n            if (fixed.width < 0) {\n                fixed.x += fixed.width;\n                fixed.width *= -1;\n            }\n            if (fixed.height < 0) {\n                fixed.y += fixed.height;\n                fixed.height *= -1;\n            }\n            fixed.rotation %= Math.PI;\n            return fixed;\n        },\n\n        /**\n         * @function\n         * @param {OpenSeadragon.Rect} area\n         * @returns {Boolean} Does this rect fit in a specified area\n         */\n        fitsIn: function(area) {\n            var rect = this.normalize();\n            var corners = [\n                rect.getTopLeft(),\n                rect.getTopRight(),\n                rect.getBottomRight(),\n                rect.getBottomLeft(),\n            ];\n            var center = rect.getCenter();\n            var rotation = rect.getDegreeRotation();\n            var areaEnd = area.getBottomRight();\n            for (var i = 0; i < 4; i++) {\n                corners[i] = corners[i].rotate(rotation, center);\n                if (corners[i].x < area.x || corners[i].x > areaEnd.x ||\n                    corners[i].y < area.y || corners[i].y > areaEnd.y) {\n                    return false;\n                }\n            }\n            return true;\n        },\n\n        /**\n         * Reduces rotation to within [-45, 45] degrees by swapping width & height\n         * @function\n         * @returns {SelectionRect} The altered rect\n         */\n        reduceRotation: function() {\n            var reduced;\n            if (this.rotation < Math.PI / (-4)) {\n                reduced = this.swapWidthHeight();\n                reduced.rotation += Math.PI / 2;\n            } else if (this.rotation > Math.PI / 4) {\n                reduced = this.swapWidthHeight();\n                reduced.rotation -= Math.PI / 2;\n            } else {\n                reduced = this.clone();\n            }\n            return reduced;\n        },\n    });\n\n}( OpenSeadragon ));\n"]}